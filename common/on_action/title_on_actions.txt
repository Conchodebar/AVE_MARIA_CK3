#On actions about titles

# All on-actions in this file provide scope:transfer_type unless otherwise noted
# scope:transfer_type has the following permutations:
# flag:conquest
# flag:conquest_holy_war
# flag:conquest_claim
# flag:conquest_populist
# flag:inheritance
# flag:abdication
# flag:destroyed
# flag:created
# flag:usurped
# flag:granted
# flag:revoked
# flag:election
# flag:independency
# flag:returned
# flag:leased_out
# flag:lease_revoked
# flag:faction_demand
# flag:swear_fealty

# A title is destroyed
# root = the holder before destruction
# scope:landed_title = the title that is being destroyed
# Does *not* provide scope:transfer_type
on_title_destroyed = {
	events = {
	}
}

# A title is transferred to a new character
# root = the new holder
# scope:title = the title that changes hands
# scope:previous_holder = previous holder. Might be dead
on_title_gain = {
	effect = {
		if = {
			limit = {
				scope:title = { is_holy_order = yes }
				NOT = { has_trait = order_member }
				has_government = holy_order_government
			}
			add_trait = order_member
		}

		#Did I receive a title from my sibling?
		if = {
			limit = {
				exists = scope:previous_holder
				scope:previous_holder = {
					is_alive = yes
					exists = var:sibling_waiting_for_land
					any_sibling = {
						this = root
						this = scope:previous_holder.var:sibling_waiting_for_land
					}
				}
			}
			add_character_flag = {
				flag = got_title_from_sibling
				years = 4
			}
		}
		
		
		#############################################
		# AVE MARIA EFFECTS							#
		#############################################
		
		# ## ROMAN ADMINISTRATION EFFECTS
		# ## INHERITING E_BYZANTIUM
		if = {
			limit = {
				scope:title = { this = title:e_byzantium }
			}
			root = {
				roman_administration_accession_to_basileus_effect = yes		
			}
			scope:previous_holder = {
				if = {
					limit = {
						is_alive = yes
					}
					roman_administration_remove_salary_indicator = yes
				}
			}
		}
		## INHERITING AN ADMINISTRATIVE TITLE
		## Checking that it is an duchy tier title from a valid character using administrative title type
		if = {
			limit = {
				root = {
					roman_administration_character_is_in_the_empire = yes
					#uses_roman_govt = yes
					NOT = { any_held_title = { this = title:e_byzantium } }
				}
				scope:title = {
					tier >= tier_duchy
					NOT = { this = title:e_byzantium }
				}
			}
			## Inheriting the counties from the inherited duchy			
			scope:title = {
				every_in_de_jure_hierarchy = {
					limit = {
						tier = tier_county
						NOT = { 
							this = { has_title_law = ave_maria_roman_administration_family_succession_law }
							has_title_law = ave_maria_roman_administration_family_succession_law							
						}
						NOT = { this = title:c_byzantion }
						holder = {
							roman_administration_character_is_in_the_empire = yes
						}
					}
					create_title_and_vassal_change = {
						type = granted
						save_scope_as = change
						add_claim_on_loss = yes
					}
					change_title_holder = {
						holder = root
						change = scope:change
					}
					resolve_title_and_vassal_change = scope:change
				}
			}
			## Giving away counties from another duchy that are not familial holdings if you had some
			# root = {
				# if = {
					# limit = {
						# any_held_title = {
							# tier = tier_county
							# NOT = { 
								# this = { has_title_law = ave_maria_roman_administration_family_succession_law }
								# has_title_law = ave_maria_roman_administration_family_succession_law							
							# }
							# NOT = {
								# any_this_title_or_de_jure_above = {
									# this = scope:title
								# }
							# }
						# }
					# }
					# every_held_title = {
						# limit = {
							# tier = tier_county
							# NOT = { 
								# this = { has_title_law = ave_maria_roman_administration_family_succession_law }
								# has_title_law = ave_maria_roman_administration_family_succession_law							
							# }
							# NOT = {
								# any_this_title_or_de_jure_above = {
									# this = scope:title
								# }
							# }
						# }
						# if = {
							# limit = {
								# de_jure_liege = {
									# tier = tier_duchy
									# holder = {
										# roman_administration_character_is_in_the_empire = yes
									# }							
								# }
							# }
							# de_jure_liege = {
								# holder = {
									# save_scope_as = new_holder
								# }							
							# }
							# create_title_and_vassal_change = {
								# type = granted
								# save_scope_as = change
								# add_claim_on_loss = yes
							# }
							# change_title_holder = {
								# holder = scope:new_holder
								# change = scope:change
							# }
							# resolve_title_and_vassal_change = scope:change
						# }
						
					# }
				# }				
			# }
			
			## Starting the terms of office event chain
			root = {
				remove_character_modifier = roman_administration_emperor_favourite
				#trigger_event = ave_maria_roman_administration_events.00012
			}

			change_government = roman_administration_theme_government

			## Changing government
			if = {
				limit = {
					scope:title = {
						roman_administration_is_a_tagma_title_trigger = yes
					}
				}
				root = {
					change_government = roman_administration_military_government
				}
			}
			if = {
				limit = {
					scope:title = {
						roman_administration_is_a_high_administrative_office_title = yes
					}
				}
				root = {
					change_government = roman_administration_sekreton_government
				}
			}
			if = {
				limit = {
					scope:title = {
						has_variable = roman_administration_doukaton_title
					}
				}
				root = {
					change_government = roman_administration_doukaton_government
				}
			}
			if = {
				limit = {
					scope:title = {
						has_variable = roman_administration_kouratoreia_title
					}
				}
				root = {
					change_government = roman_administration_kouratoreia_government
				}
			}

			every_courtier = {
				limit = {
					is_female = no
					age >= 20
				}
				add_unpressed_claim = scope:title
			}
		}

		### AVE MARIA CHRISTIAN FLAVOUR EFFECTS
		## Giving the pope the pope trait
		if = {
			limit = {
				scope:title = {
					this = title:k_papal_state
				}
			}
			root = {
				add_trait = pope
			}
		}
		## Giving bishops a special trait to prevent them from marrying
		if = {
			limit = {
				scope:title = {
					NOT = { this = title:k_papal_state }
				}
				has_government = theocracy_government
				religion = religion:christianity_religion
				highest_held_title_tier = tier_duchy
			}
			add_trait = bishop
		}
		
	}
	events = {
		roman_restoration.0005 #New Roman Emperor gets Augustus trait. (old holder, if still alive, loses it)
		roman_restoration.0199 #Restoring the Pentarchy.
		religious_decision.0312 #New holder of a county with a runestone
		coa.1 # check if title Coat of Arms should change.

		# ave_maria_roman_administration_terms_of_office_events.0001
	}
}

# A title is inherited by a character
# root = the new holder
# scope:title = the title that changes hands
# scope:previous_holder = previous holder. Should be dead
on_title_gain_inheritance = {
	events = {
	}
	effect = {
		if = {
			limit = {
				scope:title = title:e_mongol_empire
				has_character_flag = gain_mongol_succession_dread
			}
			add_dread = 50
		}

	}
}

# A title is usurped by a character
# root = the new holder
# scope:title = the title that changes hands
# scope:previous_holder = previous holder. Shouldn't be dead
on_title_gain_usurpation = {
	events = {
	}

	effect = {
		
	}
}

# A title is lost by a character
# root = the old holder
# scope:title = the title that changes hands
# scope:new_holder = new holder.
on_title_lost = {
	events = {
	}

	effect = {
		if = {
			limit = {
				scope:title = { this = title:e_byzantium }
				exists = root
				root = { is_alive = yes }
			}
			root = {
				roman_administration_remove_salary_indicator = yes
				remove_trait = basileus
				remove_trait = junior_emperor
			}
		}
	}
}

# A claim is gained by a character
# root = the claimant
# scope:title = the title that is claimed
on_explicit_claim_gain = {
	events = {
		coa.1 # check if title Coat of Arms should change.
	}
}

# A claim is lost by a character
# root = the claimant
# scope:title = the title that was claimed
on_explicit_claim_lost = {
	events = {
		coa.1 # check if title Coat of Arms should change.
	}
}

# A title change makes the character rank up in the landed tiers (eg Duke -> King)
# root = character ranking up
# scope:title = old primary title
on_rank_up = { # Will not fire during history execution or for dying characters
	events = {
	}
	effect = {
		add_achievement_flag = { FLAG = achievement_moving_up_in_the_world_flag }
		update_embassies_effect = yes
		every_ally = {
			update_embassies_effect = yes
		}
	}
}

# A title change makes the character rank down in the landed tiers (eg King -> Duke)
# root = character ranking down
# scope:title = old primary title
on_rank_down = { # Will not fire during history execution or for dying characters
	events = {
	}
	effect = {
		add_character_flag = {
			flag = make_suicide_available
			years = 5
		}
		update_embassies_effect = yes
		every_ally = {
			update_embassies_effect = yes
		}
	}
}

# A character gains a vassal
# root = character gaining vassal
# scope:vassal = vassal being gained
# scope:old_liege = the previous liege of the vassal. Might be the null character (vassal used to be a non-ruler or independent), so make sure to use "exists" checks where relevant
on_vassal_gained = {
	events = {
		realm_maintenance.1000 # Notify vassals of new liege
	}
}
