# Called from code after history generation
# Empty scope
on_game_start = {
	effect = {

		### KJH PROVINCE CALCULATOR
		init_prov_data = yes
	
		every_province = {
			get_land_cost = { return = prov_cost }
		}
		every_in_global_list = {
			variable = every_water
			
			get_land_cost = { return = prov_cost }
		}
		
		### 867 - WRATH OF THE NORTHMEN ###
		#Æthelred dying (probably)
		character:33358 = {
			if = {
				limit = {
					is_alive = yes
					is_landed = yes
				}
				trigger_event = {
					id = bookmark.0001
					days = { 365 730 }
				}
			}
		}

		#Alfred the Great becoming the Great
		character:7627 = {
			if = {
				limit = {
					is_alive = yes
					is_landed = yes
				}
				trigger_event = {
					id = bookmark.0002
					days = 1800 #~5 years
				}
			}
		}

		### 867 - THE GREAT ADVENTURERS ###
		character:251187 = {
			if = {
				limit = {
					is_alive = yes
					is_landed = yes
					AND = {
						character:251180 = { is_ai = yes }
						character:251181 = {
							is_ai = yes
							is_alive = yes
						}
					}
				}
				trigger_event = {
					id = bookmark.0101
					days = { 21 35 }
				}
			}
		}

		### HRE SETUP ###
		if = {
			limit = { exists = title:e_hre.holder }
			title:e_hre.holder = {
				every_vassal = {
					limit = {
						vassal_contract_has_modifiable_obligations = yes
					}
					vassal_contract_decrease_obligation_level = feudal_government_taxes
					vassal_contract_decrease_obligation_level = feudal_government_levies
				}
			}
		}

		#Set up Visigothic Codes.
		culture:occitan = { add_innovation = innovation_visigothic_codes }
		culture:basque = { add_innovation = innovation_visigothic_codes }
		culture:aragonese = { add_innovation = innovation_visigothic_codes }
		culture:catalan = { add_innovation = innovation_visigothic_codes }

		### RELIGIOUS THINGS ###
		religion:islam_religion = { # Set up Holy Site Buildings to be buildable in Holy Sites
			every_faith = {
				every_holy_site = {
					limit = {
						title_province = {
							has_special_building_slot = no
						}
					}
					title_province = {
						add_special_building_slot = holy_site_mosque_01
					}
				}
			}
		}
		
		religion:christianity_religion = {
			every_faith = {
				every_holy_site = {
					limit = {
						title_province = {
							has_special_building_slot = no
						}
					}
					title_province = {
						add_special_building_slot = holy_site_cathedral_01
					}
				}
			}
		}
		
		faith:old_bon = { # Has already been reformed into new bon.
			set_variable = { name = has_been_reformed }
		}

		every_religion_global = {
			limit = {
				OR = {
					this = religion:hinduism_religion
					this = religion:buddhism_religion
					this = religion:jainism_religion
					this = religion:tani_religion
					this = religion:bon_religion
				}
			}
			every_faith = {
				every_holy_site = {
					limit = {
						title_province = {
							has_special_building_slot = no
						}
					}
					title_province = {
						add_special_building_slot = holy_site_indian_grand_temple_01
					}
				}
			}
		}
		
		every_religion_global = {
			limit = {
				is_in_family = rf_pagan
			}
			every_faith = {
				every_holy_site = {
					limit = {
						title_province = {
							has_special_building_slot = no
						}
					}
					title_province = {
						add_special_building_slot = holy_site_pagan_grand_temple_01
					}
				}
			}
		}
		
		every_religion_global = {
			every_faith = {
				every_holy_site = {
					limit = {
						title_province = {
							has_special_building_slot = no
						}
					}
					title_province = {
						add_special_building_slot = holy_site_other_grand_temple_01
					}
				}
			}
		}

		#############################################
		# AVE MARIA									#
		#############################################
		
		
	}
}

# Like on_game_start, except it is called once the host (or player, in single player) exits the lobby. Good for anything where you need to know who the players are, or what the game rules are
on_game_start_after_lobby = {
	effect = {
		### GAME RULE: VIEW ON SAME-SEX RELATIONS
		if = {
			limit = { has_game_rule = accepted_same_sex_relations }
			game_rule_accepted_same_sex_relations_effect = yes
		}

		### GAME RULE: RANDOM RULER PLACEMENT
		if = {
			limit = { NOT = { has_game_rule = random_ruler_placement_off } }
			game_rule_random_ruler_placement_effect = yes
		}

		### GAME RULE: RANDOMIZE FAITH
		if = {
			limit = { has_game_rule = randomized_faiths_on }
			game_rule_randomize_faith_effect = yes
		}

		### GAME RULE: FAITH ACCEPTANCE
		if = {
			limit = { has_game_rule = full_faith_acceptance }
			game_rule_faith_acceptance_effect = yes
		}

		### GAME RULE: GENDER EQUALITY ###
		if = {
			limit = { has_game_rule = full_gender_equality }
			game_rule_full_gender_equality_effect = yes
		}
		else_if = {
			limit = { has_game_rule = inversed_gender_equality }
			game_rule_inversed_gender_equality_effect = yes #todo fix
		}

		### GAME RULE: SEXUALITY DISTRIBUTION ###
		if = {
			limit = { NOT = { has_game_rule = sexuality_distribution_default } }
			game_rule_sexuality_distribution_effect = yes
		}

		### ACHIEVEMENT: FROM RAGS TO RICHES
		every_player = {
			limit = { highest_held_title_tier = tier_county }
			add_achievement_global_variable = {
				VARIABLE = achievement_rags_to_riches_valid
				VALUE = yes
			}
		}

		#############################################
		# AVE MARIA									#
		#############################################
		every_living_character = {
			trigger_event = ave_maria_hexaco_traits_events.0001
		}

		every_ruler = {
			limit = {
				roman_administration_holds_tagma_title_trigger = yes
			}

			## Give them armies <- Terminated -
			## Give tagma commanders claimants
			trigger_event = ave_maria_roman_administration_events.0002

			## Setting up the terms of office event chain
			#trigger_event = ave_maria_roman_administration_events.00012

			# add_character_modifier = {
			# 	modifier = tagma_domestikos_salary_normal
			# 	years = 365
			# }

		}
		
		title:e_byzantium.holder = {
			save_scope_as = roman_administration_basileus
			change_government = roman_administration_government

			## Effects on the roman emperor vassals for proper government assignement and other effects
			trigger_event = ave_maria_roman_administration_events.0001
			trigger_event = ave_maria_roman_administration_events.00021

			every_vassal = {
				limit = {
					highest_held_title_tier = tier_duchy
				}
				if = {
					limit = {
						this = character:1734
					}
					set_variable = { name = roman_administration_term_count value = 0 }
							add_character_modifier = {
								modifier = roman_administration_terms_of_office_0
								years = 10
							}
				}
				if = {
					limit = {
						NOT = { 
							has_variable = roman_administration_term_count
						}
					}
					random_list = {
						25 = {
							set_variable = { name = roman_administration_term_count value = 0 }
							add_character_modifier = {
								modifier = roman_administration_terms_of_office_0
								years = 10
							}
							trigger_event = { 
								id = ave_maria_roman_administration_events.00013
								days = 365 
							}
						}
						25 = {
							set_variable = { name = roman_administration_term_count value = 1 }
							add_character_modifier = {
								modifier = roman_administration_terms_of_office_1
								years = 10
							}
							trigger_event = { 
								id = ave_maria_roman_administration_events.00014
								days = 365 
							}
						}
						25 = {
							set_variable = { name = roman_administration_term_count value = 2 }
							add_character_modifier = {
								modifier = roman_administration_terms_of_office_2
								years = 10
							}
							trigger_event = { 
								id = ave_maria_roman_administration_events.00015
								days = 365 
							}
						}
						25 = {
							set_variable = { name = roman_administration_term_count value = 3 }
							add_character_modifier = {
								modifier = roman_administration_terms_of_office_3
								years = 10
							}
							trigger_event = { 
								id = ave_maria_roman_administration_events.00016
								days = 365 
							}
						}
					}		
					## Setting up the terms of office event chain
					#trigger_event = ave_maria_roman_administration_events.00012
				}
				
				## Setting up the terms of office event chain
				#trigger_event = ave_maria_roman_administration_events.00012
				
				
			}
			
			## Officials Pay Event chain set up
			trigger_event = {
				id = ave_maria_roman_administration_events.00050
				days = 30
			}
			trigger_event = {
				id = ave_maria_roman_administration_events.00051
				days = 30
			}
			trigger_event = {
				id = ave_maria_roman_administration_events.00052
				days = 30
			}

			# add_character_modifier = {
			# 	modifier = emperor_salary_cost
			# 	years = 365
			# }
			change_government = roman_administration_government
		}

		## Prevent the pope from marrying
		title:k_papal_state.holder = {
			add_trait = pope
		}
		every_ruler = {
			limit = {
				primary_title = { NOT = { this = title:k_papal_state } }
				has_government = theocracy_government
				religion = religion:christianity_religion
				highest_held_title_tier = tier_duchy
			}
			add_trait = bishop
		}

		## Give Christian Ruler some cleric/monks for court chaplain
		every_ruler = {
			limit = {
				faith = { religion_tag = christianity_religion }
			}
			trigger_event = ave_maria_christian_flavour.0001
		}
	}

	events = {
		game_rule.1000	#Autopopulate families.
		game_rule.1011	#Hungarian Migration management.
	}
}
